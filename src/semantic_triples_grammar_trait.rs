// ---------------------------------------------------------
// This file was generated by parol.
// It is not intended for manual editing and changes will be
// lost after next build.
// ---------------------------------------------------------

// Disable clippy warnings that can result in the way how parol generates code.
#![allow(clippy::enum_variant_names)]
#![allow(clippy::large_enum_variant)]
#![allow(clippy::upper_case_acronyms)]

use parol_runtime::derive_builder::Builder;
use parol_runtime::log::trace;
#[allow(unused_imports)]
use parol_runtime::parol_macros::{pop_and_reverse_item, pop_item};
use parol_runtime::parser::{ParseTreeType, UserActionsTrait};
use parol_runtime::{ParserError, Result, Token};

/// Semantic actions trait generated for the user grammar
/// All functions have default implementations.
pub trait SemanticTriplesGrammarTrait<'t> {
    /// Semantic action for non-terminal 'SemanticTriples'
    fn semantic_triples(&mut self, _arg: &SemanticTriples<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'SemanticTriple'
    fn semantic_triple(&mut self, _arg: &SemanticTriple<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Id'
    fn id(&mut self, _arg: &Id<'t>) -> Result<()> {
        Ok(())
    }

    /// Semantic action for non-terminal 'Predicate'
    fn predicate(&mut self, _arg: &Predicate<'t>) -> Result<()> {
        Ok(())
    }

    /// This method provides skipped language comments.
    /// If you need comments please provide your own implementation of this method.
    fn on_comment_parsed(&mut self, _token: Token<'t>) {}
}

// -------------------------------------------------------------------------------------------------
//
// Output Types of productions deduced from the structure of the transformed grammar
//

// -------------------------------------------------------------------------------------------------
//
// Types of non-terminals deduced from the structure of the transformed grammar
//

///
/// Type derived for non-terminal Id
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Id<'t> {
    pub id: Token<'t>, /* [a-zA-Z_][a-zA-Z0-9_]* */
}

///
/// Type derived for non-terminal Predicate
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct Predicate<'t> {
    pub id: Box<Id<'t>>,
}

///
/// Type derived for non-terminal SemanticTriple
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct SemanticTriple<'t> {
    pub id: Box<Id<'t>>,
    pub predicate: Box<Predicate<'t>>,
    pub id0: Box<Id<'t>>,
}

///
/// Type derived for non-terminal SemanticTriples
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct SemanticTriples<'t> {
    pub semantic_triples_list: Vec<SemanticTriplesList<'t>>,
}

///
/// Type derived for non-terminal SemanticTriplesList
///
#[allow(dead_code)]
#[derive(Builder, Debug, Clone)]
#[builder(crate = "parol_runtime::derive_builder")]
pub struct SemanticTriplesList<'t> {
    pub semantic_triple: Box<SemanticTriple<'t>>,
}

// -------------------------------------------------------------------------------------------------

///
/// Deduced ASTType of expanded grammar
///
#[allow(dead_code)]
#[derive(Debug, Clone)]
pub enum ASTType<'t> {
    Id(Id<'t>),
    Predicate(Predicate<'t>),
    SemanticTriple(SemanticTriple<'t>),
    SemanticTriples(SemanticTriples<'t>),
    SemanticTriplesList(Vec<SemanticTriplesList<'t>>),
}

/// Auto-implemented adapter grammar
///
/// The lifetime parameter `'t` refers to the lifetime of the scanned text.
/// The lifetime parameter `'u` refers to the lifetime of user grammar object.
///
#[allow(dead_code)]
pub struct SemanticTriplesGrammarAuto<'t, 'u>
where
    't: 'u,
{
    // Mutable reference of the actual user grammar to be able to call the semantic actions on it
    user_grammar: &'u mut dyn SemanticTriplesGrammarTrait<'t>,
    // Stack to construct the AST on it
    item_stack: Vec<ASTType<'t>>,
}

///
/// The `SemanticTriplesGrammarAuto` impl is automatically generated for the
/// given grammar.
///
impl<'t, 'u> SemanticTriplesGrammarAuto<'t, 'u> {
    pub fn new(user_grammar: &'u mut dyn SemanticTriplesGrammarTrait<'t>) -> Self {
        Self {
            user_grammar,
            item_stack: Vec::new(),
        }
    }

    #[allow(dead_code)]
    fn push(&mut self, item: ASTType<'t>, context: &str) {
        trace!("push    {}: {:?}", context, item);
        self.item_stack.push(item)
    }

    #[allow(dead_code)]
    fn pop(&mut self, context: &str) -> Option<ASTType<'t>> {
        let item = self.item_stack.pop();
        if let Some(ref item) = item {
            trace!("pop     {}: {:?}", context, item);
        }
        item
    }

    #[allow(dead_code)]
    // Use this function for debugging purposes:
    // trace!("{}", self.trace_item_stack(context));
    fn trace_item_stack(&self, context: &str) -> std::string::String {
        format!(
            "Item stack at {}:\n{}",
            context,
            self.item_stack
                .iter()
                .rev()
                .map(|s| format!("  {:?}", s))
                .collect::<Vec<std::string::String>>()
                .join("\n")
        )
    }

    /// Semantic action for production 0:
    ///
    /// `SemanticTriples: SemanticTriplesList /* Vec */;`
    ///
    #[parol_runtime::function_name::named]
    fn semantic_triples(&mut self, _semantic_triples_list: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let semantic_triples_list =
            pop_and_reverse_item!(self, semantic_triples_list, SemanticTriplesList, context);
        let semantic_triples_built = SemanticTriples {
            semantic_triples_list,
        };
        // Calling user action here
        self.user_grammar
            .semantic_triples(&semantic_triples_built)?;
        self.push(ASTType::SemanticTriples(semantic_triples_built), context);
        Ok(())
    }

    /// Semantic action for production 1:
    ///
    /// `SemanticTriplesList /* Vec<T>::Push */: SemanticTriple SemanticTriplesList;`
    ///
    #[parol_runtime::function_name::named]
    fn semantic_triples_list_0(
        &mut self,
        _semantic_triple: &ParseTreeType<'t>,
        _semantic_triples_list: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let mut semantic_triples_list =
            pop_item!(self, semantic_triples_list, SemanticTriplesList, context);
        let semantic_triple = pop_item!(self, semantic_triple, SemanticTriple, context);
        let semantic_triples_list_0_built = SemanticTriplesList {
            semantic_triple: Box::new(semantic_triple),
        };
        // Add an element to the vector
        semantic_triples_list.push(semantic_triples_list_0_built);
        self.push(ASTType::SemanticTriplesList(semantic_triples_list), context);
        Ok(())
    }

    /// Semantic action for production 2:
    ///
    /// `SemanticTriplesList /* Vec<T>::New */: ;`
    ///
    #[parol_runtime::function_name::named]
    fn semantic_triples_list_1(&mut self) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let semantic_triples_list_1_built = Vec::new();
        self.push(
            ASTType::SemanticTriplesList(semantic_triples_list_1_built),
            context,
        );
        Ok(())
    }

    /// Semantic action for production 3:
    ///
    /// `SemanticTriple: Id Predicate Id;`
    ///
    #[parol_runtime::function_name::named]
    fn semantic_triple(
        &mut self,
        _id: &ParseTreeType<'t>,
        _predicate: &ParseTreeType<'t>,
        _id0: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let id0 = pop_item!(self, id0, Id, context);
        let predicate = pop_item!(self, predicate, Predicate, context);
        let id = pop_item!(self, id, Id, context);
        let semantic_triple_built = SemanticTriple {
            id: Box::new(id),
            predicate: Box::new(predicate),
            id0: Box::new(id0),
        };
        // Calling user action here
        self.user_grammar.semantic_triple(&semantic_triple_built)?;
        self.push(ASTType::SemanticTriple(semantic_triple_built), context);
        Ok(())
    }

    /// Semantic action for production 4:
    ///
    /// `Id: /[a-zA-Z_][a-zA-Z0-9_]*/;`
    ///
    #[parol_runtime::function_name::named]
    fn id(&mut self, id: &ParseTreeType<'t>) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let id = id.token()?.clone();
        let id_built = Id { id };
        // Calling user action here
        self.user_grammar.id(&id_built)?;
        self.push(ASTType::Id(id_built), context);
        Ok(())
    }

    /// Semantic action for production 5:
    ///
    /// `Predicate: '--'^ /* Clipped */ Id '->'^ /* Clipped */;`
    ///
    #[parol_runtime::function_name::named]
    fn predicate(
        &mut self,
        _minus_minus: &ParseTreeType<'t>,
        _id: &ParseTreeType<'t>,
        _minus_g_t: &ParseTreeType<'t>,
    ) -> Result<()> {
        let context = function_name!();
        trace!("{}", self.trace_item_stack(context));
        let id = pop_item!(self, id, Id, context);
        let predicate_built = Predicate {
            // Ignore clipped member 'minus_minus'
            id: Box::new(id),
            // Ignore clipped member 'minus_g_t'
        };
        // Calling user action here
        self.user_grammar.predicate(&predicate_built)?;
        self.push(ASTType::Predicate(predicate_built), context);
        Ok(())
    }
}

impl<'t> UserActionsTrait<'t> for SemanticTriplesGrammarAuto<'t, '_> {
    ///
    /// This function is implemented automatically for the user's item SemanticTriplesGrammar.
    ///
    fn call_semantic_action_for_production_number(
        &mut self,
        prod_num: usize,
        children: &[ParseTreeType<'t>],
    ) -> Result<()> {
        match prod_num {
            0 => self.semantic_triples(&children[0]),
            1 => self.semantic_triples_list_0(&children[0], &children[1]),
            2 => self.semantic_triples_list_1(),
            3 => self.semantic_triple(&children[0], &children[1], &children[2]),
            4 => self.id(&children[0]),
            5 => self.predicate(&children[0], &children[1], &children[2]),
            _ => Err(ParserError::InternalError(format!(
                "Unhandled production number: {}",
                prod_num
            ))
            .into()),
        }
    }

    fn on_comment_parsed(&mut self, token: Token<'t>) {
        self.user_grammar.on_comment_parsed(token)
    }
}
